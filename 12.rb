# The sequence of triangle numbers is generated by adding the natural numbers. So the 7^(th) triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
# 
# 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
# 
# Let us list the factors of the first seven triangle numbers:
# 
#      1: 1
#      3: 1,3
#      6: 1,2,3,6
#     10: 1,2,5,10
#     15: 1,3,5,15
#     21: 1,3,7,21
#     28: 1,2,4,7,14,28
# 
# We can see that 28 is the first triangle number to have over five divisors.
# 
# What is the value of the first triangle number to have over five hundred divisors?
class Integer
  def factors
    n = self
    result = ""
    checker = 2

    while (checker**2 <= n) do
      if n % checker == 0
        result += checker.to_s
        n = n / checker
        result += ' ' unless n == 1
      else
        checker = checker + 1
      end
    end

    if n != 1
      result += n.to_s
    end

    result.to_a(' ')
  end

  # overwritten, I don't need modulus
  def sum_progression
    self * (self + 1) / 2
  end
  
  def integral_divisors_size
    factors = self.factors
    result = 1
    factors.uniq.each do |prime|
      result *= (factors.count(prime) + 1)
    end
    result
  end
  def calc_divisors
    res=[1]
    2.upto(Math.sqrt(self).floor) do |i|
      if self % i == 0
        res << i
      end
    end
    res.reverse.each do |i|
      res << self / i
    end
    res.uniq
  end
end


(2..100000).inject(1) do |acc,i|
  if(acc.calc_divisors.size > 500)
    puts acc
  end
  acc+i
end
